#!/bin/bash

EXCLUDE=""
DEF_ENV="/etc/default/prepare-checkbox-sanity.conf"
DEV_MODE="yes"
# shellcheck disable=SC1090
source "$DEF_ENV"

usage() {
cat << EOF
usage: $0 options plan

    options:
        -h|--help           print this message
        -e|--exclude-unites exclude unites
                            e.g. -e ".*audio/alsa_record_playback_automated .*suspend/record_playback_after_suspend_auto"
        --checkbox-conf     The path of checkbox.conf, refer to https://checkbox.readthedocs.io/en/latest/launcher-tutorial.html
                            The default path will refer to CHECKBOX_CONF in $DEF_ENV
                            See usage below for detail.
        -b                  batch mode, which will go all default way.
        -l                  list-bootstrapped for plain
        -s                  dry run. Just prepare all stuff without real run checkbox.
        --dev               When provided value "yes" then it prepares the needed providers under /var/tmp/checkbox-providers
                            to side-load specific plainbox-providers from repositories in /usr/lib/prepare-checkbox-sanity/sideload.json
                            When provided value "no" then it will not do any additional change for /var/tmp/checkbox-providers. The
                            default value is "yes".

    plan:
        sru
            the plan in plainbox-provider-sru

        pc-sanity-smoke-test
            the plan in plainbox-provider-pc-sanity on ppa:oem-solutions-group/pc-sanity

        Or any plan in /usr/share/plainbox-provider-*/units could be used here as well.

    usage:
        run pc-sanity-smoke-test plan, and use the checkbox.conf from current folder
        $0 pc-sanity-smoke-test --checkbox-conf \`pwd\`/checkbox.conf -b

        run sru plan, and get the checkbox.conf from http://192.168.0.40/checkbox.conf
        $0 sru --checkbox-conf http://192.168.0.40/checkbox.conf -b

        run pc-sanity-smoke-test plan, and excludee all tests related to auto switch graphics.
        checkbox-run-plan -e com.canonical.certification::.*auto_switch_card.* -e com.canonical.certification::suspend/1_.* -e com.canonical.certification::suspend/2_.* pc-sanity-smoke-test -b
EOF
}

error(){
usage
exit 1
}

# to get the needed excluding from side-loaded folders.
get_exclude_from_side_load() {
    local exclude_from_side_load
    [ -d "/var/tmp/checkbox-providers/" ] || return 0
    exclude_from_side_load="$(cat /var/tmp/checkbox-providers/*/side-load-changes.json | jq -r ".need_exclude" | xargs)" || true
    EXCLUDE="$EXCLUDE $exclude_from_side_load"
}

while [ $# -gt 0 ]
do
    case "$1" in
        -h | --help)
            usage 0
            exit 0
            ;;
        -e | --exclude)
            shift
            [ -z "$1" ] && error
            EXCLUDE="$EXCLUDE $1"
            ;;
        --checkbox-conf)
            shift
            CHECKBOX_CONF="$1"
            ;;
        -b )
            SILENCE="TRUE"
            ;;
        -l )
            shift
            checkbox-cli list-bootstrapped com.canonical.certification::"$1"
            exit 0
            ;;
        -s )
            DRYRUN="TRUE"
            ;;
        --dev )
            shift
            [ -z "$1" ] && error
            DEV_MODE="$1"
            ;;
        *)
            [ -z "$1" ] && error
            if [ -z "${1##exclude = *}" ];then
                # a back door for jenkins testflinger job
                EXCLUDE="$EXCLUDE ${1##exclude = }"
            else
                PLAN=$1
                echo "== you selected $PLAN =="
            fi
       esac
       shift
done

[ -z "$PLAN" ] && error

interactive(){
    echo "do you want to set the path of checkbox.conf? (refer to https://checkbox.readthedocs.io/en/latest/launcher-tutorial.html)"
    read -p -r "(Y/N):" set_checkbox_conf
    if [[ $set_checkbox_conf == [Yy] ]] ; then
        read -p -r "path of checkbox.conf:" CHECKBOX_CONF
    else
        echo "Keep the checkbox.conf as default from $DEF_ENV"
    fi
}
[ "$SILENCE" == "TRUE"  ] || interactive
if [ -n "$CHECKBOX_CONF" ] && [ -z "${CHECKBOX_CONF##http*}" ]; then
    mkdir -p "$HOME"/.cache/prepare-checkbox
    if wget --waitretry=5 -T 5 -t 3 "$CHECKBOX_CONF" -O "$HOME"/.cache/prepare-checkbox/checkbox.conf; then
        CHECKBOX_CONF="$HOME/.cache/prepare-checkbox/checkbox.conf"
    else
        CHECKBOX_CONF="/usr/lib/prepare-checkbox-sanity/fall-back-checkbox.conf"
    fi
fi

# always use the latest plan if ineternet access is available.
if [ -z "${PLAN##pc*}" ]; then
# shellcheck disable=SC2034
    for r in 1 2 3; do
        if ping -c 2 8.8.8.8; then
            sudo apt-get update; sudo apt-get install -y plainbox-provider-pc-sanity
            break
        fi
    done
fi

external_conf="$(cat $CHECKBOX_CONF| grep -v 'checkbox-cli')"
# prepare needed user environment
mkdir -p "$HOME"/.local/share/plainbox
ln -sf /usr/lib/prepare-checkbox-sanity/machine-manifest.json "$HOME"/.local/share/plainbox

if [ "$DEV_MODE" = "yes" ]; then
    [ -f /usr/lib/prepare-checkbox-sanity/sideload.json ] || error "/usr/lib/prepare-checkbox-sanity/sideload.json is not there."
    prepare-checkbox-sanity --side-load-conf /usr/lib/prepare-checkbox-sanity/sideload.json
    get_exclude_from_side_load
fi

cat <<EOF > "$HOME/generated_launcher"
#!/usr/bin/env checkbox-cli
[launcher]
launcher_version = 1

[test plan]
unit = com.canonical.certification::$PLAN
forced = yes

[test selection]
forced = yes
exclude = $EXCLUDE

[ui]
type = silent

[daemon]
normal_user = $USER

$external_conf
EOF
echo "========= the checkbox launcher will be run ========="
cat "$HOME/generated_launcher"
echo "====================================================="
[ "$DRYRUN" != "TRUE" ] && checkbox-cli launcher "$HOME/generated_launcher"
